import { useEffect, useRef, useState } from "react";
import type { CoordinatesType } from "../../../types";
import {
  COLUMNS_HEADER,
  ROWS_HEADER,
  transformLetterToNumber,
} from "../../../utils/game";
import { Input } from "@/components/ui/Input";
import { Button } from "@/components/ui/Button";
import { toast } from "sonner";
import { isAlphabetKey } from "@/utils/general";

type InputType = {
  inputColumn: string;
  inputRow: string;
};

interface IFireControl {
  target: CoordinatesType | [0, 0];
  setTarget: React.Dispatch<React.SetStateAction<CoordinatesType>>;
  handleFire: () => void;
}

const initialValues: InputType = {
  inputColumn: "",
  inputRow: "",
};

function FireControl({ target, setTarget, handleFire }: IFireControl) {
  const [value, setValue] = useState<InputType>(initialValues);
  const columnInputRef = useRef<HTMLInputElement>(null);
  const rowInputRef = useRef<HTMLInputElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);

  function handleChange(e: React.FormEvent<HTMLInputElement>): void {
    const { name, value: newValue } = e.currentTarget;

    if (newValue.length === 0) {
      const updated = { ...value, [name]: newValue };
      setValue(updated);
      setTarget([
        transformLetterToNumber(updated.inputColumn),
        updated.inputRow ? parseInt(updated.inputRow) : 0,
      ]);
      return;
    }

    if (name === "inputRow") {
      if (/^\d+$/.test(newValue) && ROWS_HEADER.includes(parseInt(newValue))) {
        const updated = { ...value, inputRow: newValue };
        setValue(updated);
        setTarget([
          transformLetterToNumber(updated.inputColumn),
          updated.inputRow ? parseInt(updated.inputRow) : 0,
        ]);

        if (newValue.length >= 2 || parseInt(newValue) === 10) {
          buttonRef.current?.focus();
        }
      } else {
        toast.error("The input can only be from 1 to 10!");
      }
      return;
    }
  }

  useEffect(() => {
    if (target[0] === 0 && target[1] === 0) setValue(initialValues);
  }, [target]);

  function handleClick() {
    if (value.inputColumn.length > 0 && value.inputRow.length > 0) {
      handleFire();
    } else {
      toast.error("You must fill both coordinates!");
    }
  }

  function handleChangeKeyColumn(e: React.KeyboardEvent<HTMLInputElement>) {
    const upperValue = e.key.toUpperCase();

    if (COLUMNS_HEADER.includes(upperValue)) {
      e.preventDefault();
      const updated = { ...value, inputColumn: upperValue };
      setValue(updated);
      setTarget([
        transformLetterToNumber(updated.inputColumn),
        updated.inputRow ? parseInt(updated.inputRow) : 0,
      ]);
      rowInputRef.current?.focus();
    } else if (isAlphabetKey(e.key)) {
      e.preventDefault();
      toast.error("The input can only be from A to J!");
    }
  }

  // Generated by GPT: Effective way to listen for Enter, ArrowLeft, and ArrowRight keys
  function handleKeyNavigation(
    e: React.KeyboardEvent<HTMLInputElement | HTMLButtonElement>,
    name?: keyof InputType
  ) {
    if (e.key === "Enter") {
      buttonRef.current?.click();
      return;
    }

    const focusable = [columnInputRef, rowInputRef, buttonRef];
    const currentIndex = focusable.findIndex(
      (ref) => ref.current === document.activeElement
    );

    if (e.key === "ArrowRight" && currentIndex < focusable.length - 1) {
      focusable[currentIndex + 1]?.current?.focus();
    } else if (e.key === "ArrowLeft" && currentIndex > 0) {
      focusable[currentIndex - 1]?.current?.focus();
    }

    if (e.key === "Backspace" && name) {
      const cleared = { ...value, [name]: "" };
      setValue(cleared);
      setTarget([
        transformLetterToNumber(cleared.inputColumn),
        cleared.inputRow ? parseInt(cleared.inputRow) : 0,
      ]);
    }
  }

  return (
    <>
      <div className='flex gap-2 items-center justify-between'>
        <div className='flex gap-4 h-12'>
          <Input
            name='inputColumn'
            value={value?.inputColumn}
            ref={columnInputRef}
            placeholder='A'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
            onKeyDown={(e) => {
              handleChangeKeyColumn(e)
              handleKeyNavigation(e, "inputColumn")
            }}
          />
          <Input
            name='inputRow'
            value={value?.inputRow}
            ref={rowInputRef}
            placeholder='5'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
            onKeyDown={(e) => handleKeyNavigation(e, "inputRow")}
          />
        </div>
        <Button
          type='button'
          ref={buttonRef}
          className='w-32 h-12'
          onClick={handleClick}
          onKeyDown={(e) => handleKeyNavigation(e)}
        >
          Fire!
        </Button>
      </div>
    </>
  );
}

export default FireControl;
