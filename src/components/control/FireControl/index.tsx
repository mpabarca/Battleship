import { useEffect, useRef, useState } from "react";
import type { CoordinatesType } from "../../../types";
import {
  COLUMNS_HEADER,
  ROWS_HEADER,
  transformLetterToNumber,
} from "../../../utils/game";
import { Input } from "@/components/ui/Input";
import { Button } from "@/components/ui/Button";
import { toast } from "sonner";

type InputType = {
  inputColumn: string;
  inputRow: string;
};

interface IFireControl {
  target: CoordinatesType | [0, 0];
  setTarget: React.Dispatch<React.SetStateAction<CoordinatesType>>;
  handleFire: () => void;
}

const initialValues: InputType = {
  inputColumn: "",
  inputRow: "",
}

// const REGEXP_ONLY_DIGITS = "/^(10|[1-9])$/"
// const REGEXP_ONLY_ALPHABET = "/^[A-Ja-j]$/"

function FireControl({ target, setTarget, handleFire }: IFireControl) {
  const [value, setValue] = useState<InputType>(initialValues);
  const rowInputRef = useRef<HTMLInputElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null)

  function handleChange(e: React.FormEvent<HTMLInputElement>): void {
    const { name, value: newValue } = e.currentTarget;
    if (newValue.length === 0) {
      const updated = { ...value, [name]: newValue };
      setValue(updated);
      setTarget([
        transformLetterToNumber(updated.inputColumn),
        updated.inputRow ? parseInt(updated.inputRow) : 0,
      ]);
      return;
    }
    if (name === "inputColumn") {
      const upperValue = newValue.toUpperCase();
      if (COLUMNS_HEADER.includes(upperValue)) {
        const updated = { ...value, inputColumn: upperValue };
        setValue(updated);
        setTarget([
          transformLetterToNumber(updated.inputColumn),
          updated.inputRow ? parseInt(updated.inputRow) : 0,
        ]);
        rowInputRef.current?.focus();
      } else {
        toast.error('The input can only be from A to J!')
      }
      return;
    }

    if (name === "inputRow") {
      // Generated by GPT: reg. exp. allows only numeric input
      if (/^\d+$/.test(newValue) && ROWS_HEADER.includes(parseInt(newValue))) {
        const updated = { ...value, inputRow: newValue };
        setValue(updated);
        setTarget([
          transformLetterToNumber(updated.inputColumn),
          updated.inputRow ? parseInt(updated.inputRow) : 0,
        ]);
        
        if (newValue.length >= 2 || parseInt(newValue) === 10) {
          buttonRef.current?.focus();
        }
      } else {
        toast.error('The input can only be from 1 to 10!')
      }
      return;
    }
  }

  useEffect(() => {
    if (target[0] === 0 && target[1] === 0) setValue(initialValues)
  }, [target])

  function handleClick() {
    if (value.inputColumn.length > 0 && value.inputRow.length > 0) {
      handleFire();
    } else {
      toast.error('You must fill both coordinates!')
    }
  }

  return (
    <>
      <div className='flex gap-2 items-center justify-between'>
        <div className='flex gap-4 h-12'>
          <Input
            name='inputColumn'
            value={value?.inputColumn}
            placeholder='A'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
          />
          <Input
            name='inputRow'
            value={value?.inputRow}
            ref={rowInputRef}
            placeholder='5'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
          />
        </div>
        <Button type='button' ref={buttonRef} className='w-32 h-12' onClick={handleClick}>
          Fire!
        </Button>
      </div>
    </>
  );
}

export default FireControl;
