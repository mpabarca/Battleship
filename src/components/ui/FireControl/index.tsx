import { useEffect, useState } from "react";
import type { CoordinatesType } from "../../../types";
import { COLUMNS_HEADER, ROWS_HEADER, transformLetterToNumber } from "../../../utils/game";
import ErrorMessage from "../ErrorMessage";


type InputType = {
  inputColumn: string;
  inputRow: string;
};

type ErrorType = {
  columnCriteria: boolean;
  rowCriteria: boolean;
  emptyField: boolean;
}

interface IFireControl {
  setTarget: React.Dispatch<
    React.SetStateAction<CoordinatesType | undefined>
  >;
  handleFire: () => void;
}

function FireControl({ setTarget, handleFire }: IFireControl) {
  const [value, setValue] = useState<InputType>({
    inputColumn: "",
    inputRow: "",
  });
  const [errors, setErrors] = useState<ErrorType>({columnCriteria: false, rowCriteria: false, emptyField: false})

  function handleChange(e: React.FormEvent<HTMLInputElement>): void {
    const { name, value: newValue } = e.currentTarget;
    if(newValue.length === 0) {
      setValue((prev) => ({
        ...prev,
        [name]: newValue,
      }));
      return
    }
    if (name === "inputColumn") {
      const upperValue = newValue.toUpperCase();
      if (COLUMNS_HEADER.includes(upperValue)) {
        setValue((prev) => ({
          ...prev,
          inputColumn: upperValue,
        }));
        setErrors((prev) => ({
          ...prev,
          columnCriteria: false
        }))
      } else {
        setErrors((prev) => ({
          ...prev,
          columnCriteria: true
        }))
      }
      return;
    }

    if (name === "inputRow") {
      // Generated by GPT: reg. exp. allows only numeric input
      if (/^\d+$/.test(newValue) && ROWS_HEADER.includes(parseInt(newValue))) {
        setValue((prev) => ({
          ...prev,
          inputRow: newValue,
        }));
        setErrors((prev) => ({
          ...prev,
          rowCriteria: false
        }))
      } else {
        setErrors((prev) => ({
          ...prev,
          rowCriteria: true
        }))
      }
      return
    }
  }

  function handleClick() {
    console.log('value', value)
    if(value.inputColumn.length > 0 && value.inputRow.length > 0 ) {
      handleFire()
      setErrors((prev) => ({
        ...prev,
        emptyField: false,
      }))
    }
    else {
      setErrors((prev) => ({
        ...prev,
        emptyField: true,
      }))
    }
  }

  useEffect(() => {
    setTarget([
      transformLetterToNumber(value.inputColumn),
      value.inputRow ? parseInt(value.inputRow) : 0,
    ]);
  }, [setTarget, value]);

  return (
    <div className="flex flex-col gap-10 w-52">
      <div className='flex gap-2 items-center justify-between'>
        <div className="flex gap-4 h-12">
          <input
            name='inputColumn'
            value={value?.inputColumn}
            placeholder='A'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
          />
          <input
            name='inputRow'
            value={value?.inputRow}
            placeholder='5'
            className='w-10 h-full border-b-2 text-center placeholder:text-center'
            onChange={(e) => handleChange(e)}
          />

        </div>
        <button type='button' className="w-24 h-12" onClick={handleClick}>
          Fire!
        </button>
      </div>
      <div className="w-full h-60 grid grid-col-3 justify-between gap-1">
        {errors.emptyField && <ErrorMessage message="You must fill both coordinates!" />}
        {errors.columnCriteria && <ErrorMessage message="The input can only be from A to J!" />}
        {errors.rowCriteria && <ErrorMessage message="The input can only be from 1 to 10!" />}
      </div>
    </div>
  );
}

export default FireControl;
